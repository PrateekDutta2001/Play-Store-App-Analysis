# -*- coding: utf-8 -*-
"""Play Store App Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sI18R3Klpx97vdkT8FU8xr0HMGL7lN_1

# Play Store App Analysis - By Prateek Dutta
#Google


While many public datasets (on Kaggle and the like) provide Apple App Store data, there are not many counterpart datasets available for Google Play Store apps anywhere on the web. On digging deeper, I found out that iTunes App Store page deploys a nicely indexed appendix-like structure to allow for simple and easy web scraping. On the other hand, Google Play Store uses sophisticated modern-day techniques (like dynamic page load) using JQuery making scraping more challenging.

This information is scraped from the Google Play Store. This app information would not be available without it.

Tools & Techniques:-

Python[Language]

Numpy, Pandas, Matplotlib, Seaborn, Ploty Express [Libraries]

Data Cleaning
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/gdrive/')
# %cd /gdrive

ls

cd/gdrive/MyDrive/Play Store App analysis/

ls

import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

df=pd.read_csv('googleplaystore.csv')
df.head()

df.shape

df.isnull().sum()

"""As we can observe only rating columns has more than 1000 null values other columns has 8 or 4 or 1 null values so we can drop them but  rating is important column and has so many null values so it will be a good option to fill those null values 

"""

sns.heatmap(df.isnull(),cbar=False)

"""# Data Cleaning

We will take mean of rating column and fill the mean values with null values and then round the decimal place to 1
"""

a=df['Rating'].mean()
df['Rating']=df['Rating'].fillna(a)
df['Rating']=df['Rating'].round(1)
df['Rating'].sample(6)

df.dropna(inplace=True)

"""We have 482 duplicated rows we have to drop those"""

df.duplicated().sum()

df.drop_duplicates(inplace=True)

"""Now, We will perform data cleaning in columns like Reviews,Size,Installs,Price and Ratings  also changed their dtypes  """

df.info()

"""Review columns has '3.0M' text so removed it  and now i will change the dtype to int """

df=df[df['Reviews'].str.isnumeric()]

df['Reviews']=df['Reviews'].astype('int64')

"""I will  replace "varies with device" text with 10 because it was occuring most of  time and it occur before 11 so i replaced it with 10 and after that changed the dtype to float """

def get_size(size):
    if size == 'Varies with device':
        return 10
    elif size.endswith('M'):
        size = size[:-1]
        return float(size)
df['Size'] = df['Size'].apply(get_size)

"""Install column has '+' and ', ' so removed those using regex and changed dtype to int """

df['Installs']=df['Installs'].str.replace(r"[^a-zA-Z\d\_]+","")

df['Installs']=df['Installs'].astype('int64')

"""price columns has dollar  so removed it using regex then  c hnaged the dtype to float"""

df['Price'].unique()

df['Price']=df['Price'].replace('[^0-9\.-]','',regex=True)

df['Price']=df['Price'].astype(float)

"""# Cleaned dataset"""

df.head()

"""# Visualizations

Free apps are more than Paid apps
"""

df['Type'].value_counts().plot(kind='bar',color='green',width=0.5)
fig = plt.figure(figsize = (20,20))

plt.subplots(figsize=(18,8))
plt.xticks(rotation = 90)
sns.barplot('Category','Installs', data = df)

"""Communication category is most installed category, well  instagram,facebook,whatsapp etc and social category is second most installed category """

communication=df[df['Category']=='COMMUNICATION']

"""Avg rating in communication category """

communication['Rating'].mean().round(1)

df.head()

plt.subplots(figsize=(18,8))
plt.xticks(rotation=90)
sns.barplot('Category','Reviews',data=df)

"""Social has many reviewed and popular apps and communication is the second most reviewed category"""

plt.subplots(figsize=(18,8))
plt.xticks(rotation=90)
sns.barplot('Content Rating','Installs',data=df)

"""Everyone and Teen are most Installed 'Content Rating' column"""

plt.subplots(figsize=(18,8))
plt.xticks(rotation=90)
sns.barplot('Category','Size',data=df)

"""Game category has largest size apps.Family is second category which has large size apps"""

plt.subplots(figsize=(18,8))
plt.xticks(rotation=90)
sns.barplot('Category','Rating',data=df)

"""Mostly all categories are rated equally not much difference i can see

Let's do some more analysis and take out some insights from the dataset

Family category is very popular in the playstore dataset
"""

df['Category'].value_counts().plot(kind='barh',color='RED')

family=df[df['Category']=='FAMILY']

"""Lets see most installed apps in family category """

family[['Installs','App','Category']].sort_values(by='Installs',ascending=False).head(21).reset_index(drop=True)

"""After "family", "game" is the most popular category"""

game=df[df['Category']=='GAME']

"""Most Installed games in game category"""

game[['App','Installs','Category']].sort_values(by='Installs',ascending=False).drop_duplicates().head(20).reset_index(drop=True)

"""Most Installed Apps """

df[['App','Installs','Category']].sort_values(by='Installs',ascending=False).head(11).reset_index(drop=True).drop_duplicates()

"""Most reviewed Apps """

df[['App','Reviews','Category']].sort_values(by='Reviews',ascending=False).reset_index(drop=True).head(20).drop_duplicates('App').reset_index(drop=True)

"""Most Expensive and useless apps """

df[['App','Price']].sort_values(by='Price',ascending=False).reset_index(drop=True).head(10)